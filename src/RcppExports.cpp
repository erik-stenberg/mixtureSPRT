// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cppmSPRT
NumericVector cppmSPRT(Rcpp::NumericVector x, Rcpp::NumericVector y, Nullable<NumericVector> xpre, Nullable<NumericVector> ypre, double sigma, double tau, double theta, Rcpp::CharacterVector distribution);
RcppExport SEXP _mixtureSPRT_cppmSPRT(SEXP xSEXP, SEXP ySEXP, SEXP xpreSEXP, SEXP ypreSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP thetaSEXP, SEXP distributionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type xpre(xpreSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type ypre(ypreSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type distribution(distributionSEXP);
    rcpp_result_gen = Rcpp::wrap(cppmSPRT(x, y, xpre, ypre, sigma, tau, theta, distribution));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mixtureSPRT_cppmSPRT", (DL_FUNC) &_mixtureSPRT_cppmSPRT, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_mixtureSPRT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
